SELECT

1- Selezionare tutte le software house americane (3)
SELECT * FROM `software_houses` WHERE `country` LIKE "United States";

2- Selezionare tutti i giocatori della città di 'Rogahnland' (2)
SELECT * FROM `players` WHERE `players`.`city` LIKE 'Rogahnland';

3- Selezionare tutti i giocatori il cui nome finisce per "a" (220)
SELECT * FROM `players` WHERE `players`.`name` LIKE "%a";

4- Selezionare tutte le recensioni scritte dal giocatore con ID = 800 (11)
SELECT * FROM `reviews` WHERE `reviews`.`player_id` = 800;

5- Contare quanti tornei ci sono stati nell'anno 2015 (9)
SELECT * FROM `tournaments` WHERE `tournaments`.`year` = 2015;

6- Selezionare tutti i premi che contengono nella descrizione la parola 'facere' (2)
SELECT * FROM `awards` WHERE `awards`.`description` LIKE '%facere%';

7- Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta (del videogioco vogliamo solo l'ID) (287)
SELECT DISTINCT `category_videogame`.`videogame_id` FROM `category_videogame` WHERE `category_videogame`.`category_id` = 2 OR `category_videogame`.`category_id` = 6;

8- Selezionare tutte le recensioni con voto compreso tra 2 e 4 (2947)
SELECT * FROM `reviews` WHERE `reviews`.`rating` >= 2 AND `reviews`.`rating` <= 4;

9- Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020 (46)
SELECT * FROM `videogames` WHERE YEAR(`release_date`) = 2020;

10- Selezionare gli id dei videogame che hanno ricevuto almeno una recensione da stelle: 5, mostrandoli una sola volta (443)
SELECT DISTINCT `reviews`.`videogame_id` FROM `reviews` WHERE `rating` >= 5;

*********** BONUS ***********

11- Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 (review number = 12, avg_rating = 3.16 circa)
SELECT COUNT(*), AVG(rating)
from reviews 
WHERE videogame_id = 412;

12- Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018 (13)
SELECT COUNT(videogames.id)
from videogames 
WHERE software_house_id = 1 AND YEAR(release_date) = 2018;


------------------------------------------------------------------------------------------------------------------------------------------------------------

GROUP BY

1- Contare quante software house ci sono per ogni paese (3)
SELECT COUNT(`id`) FROM `software_houses` GROUP BY `country`;

2- Contare quante recensioni ha ricevuto ogni videogioco (del videogioco vogliamo solo l'ID) (500)
SELECT COUNT(`videogame_id`) FROM `reviews` GROUP BY `videogame_id`;

3- Contare quanti videogiochi hanno ciascuna classificazione PEGI (della classificazione PEGI vogliamo solo l'ID) (13)
SELECT COUNT(*) FROM `pegi_label_videogame` GROUP BY pegi_label_id;

4- Mostrare il numero di videogiochi rilasciati ogni anno (11)
SELECT COUNT(id) FROM `videogames` GROUP BY YEAR(release_date);

5- Contare quanti videogiochi sono disponbiili per ciascun device (del device vogliamo solo l'ID) (7)
SELECT COUNT(videogame_id) FROM `device_videogame` GROUP BY device_id;

6- Ordinare i videogame in base alla media delle recensioni (del videogioco vogliamo solo l'ID) (500)
SELECT AVG(rating), videogame_id FROM `reviews` GROUP BY videogame_id ORDER BY AVG(rating);

------------------------------------------------------------------------------------------------------------------------------------------------------------

JOIN

1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)
select distinct * from `players` inner join `reviews` where players.id = reviews.player_id;

2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)
SELECT DISTINCT videogames.id, videogames.name FROM `videogames` 
INNER JOIN tournament_videogame ON tournament_videogame.videogame_id = videogames.id
INNER JOIN tournaments ON tournaments.id = tournament_videogame.tournament_id
WHERE tournaments.year = 2016;

3- Mostrare le categorie di ogni videogioco (1718)
SELECT categories.name FROM `categories` 
INNER JOIN category_videogame ON categories.id = category_videogame.category_id
INNER JOIN videogames on category_videogame.videogame_id = videogames.id;

4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)
SELECT COUNT(*) FROM software_houses 
INNER JOIN videogames ON software_houses.id = videogames.software_house_id WHERE videogames.release_date > 2020 GROUP BY software_houses.name;

5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)
SELECT DISTINCT COUNT(*) FROM awards 
INNER JOIN award_videogame ON awards.id = award_videogame.award_id 
INNER JOIN videogames on award_videogame.videogame_id = videogames.id 
INNER JOIN software_houses on videogames.software_house_id = software_houses.id;

6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)
SELECT DISTINCT
*
FROM `categories`
INNER JOIN category_videogame ON category_videogame.category_id = categories.id
INNER JOIN videogames ON vdeogames.id = category_videogame.videogame_id
INNER JOIN pegi_label_videogame ON pegi_label_videogame.videogame_id = videogames.id
INNER JOIN pegi_labels ON pegi_labels.id = pegi_label_videogame.pegi_label_id
INNER JOIN reviews ON videogames.id = reviews.videogame_id
WHERE reviews.rating >= 4;

7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)
SELECT * FROM `videogames` 
INNER JOIN tournament_videogame ON tournament_videogame.videogame_id = videogames.id
INNER JOIN tournaments ON tournament_videogame.tournament_id = tournaments.id
INNER JOIN player_tournament ON tournaments.id = player_tournament.tournament_id
INNER JOIN players ON player_tournament.player_id = players.id
WHERE players.name LIKE "S%";

8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36)
SELECT tournaments.city, awards.name, tournaments.year FROM tournaments 
INNER JOIN tournament_videogame ON tournament_videogame.tournament_id = tournaments.id 
INNER JOIN videogames ON tournament_videogame.videogame_id = videogames.id 
INNER JOIN award_videogame ON videogames.id = award_videogame.videogame_id 
INNER JOIN awards on award_videogame.award_id = awards.id 
WHERE awards.id = 1 AND award_videogame.year = 2018;

9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)
SELECT players.name FROM players
INNER JOIN player_tournament ON players.id = player_tournament.player_id
INNER JOIN tournaments ON player_tournament.tournament_id = tournaments.id
INNER JOIN tournament_videogame ON tournament_videogame.tournament_id = tournaments.id
INNER JOIN videogames ON tournament_videogame.videogame_id = videogames.id
INNER JOIN award_videogame ON award_videogame.videogame_id = videogames.id
INNER JOIN awards ON award_videogame.award_id = awards.id
WHERE awards.id = 5 AND award_videogame.year = 2018 AND tournaments.year = 2019;


*********** BONUS ***********

10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)

11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)

12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)

13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 1.5 (10)